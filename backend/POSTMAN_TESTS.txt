===============================================
üß™ GUIA COMPLETO PARA TESTES NO POSTMAN
===============================================

üìã CONFIGURA√á√ÉO INICIAL
===============================================

1. Abra o Postman
2. Crie uma nova Collection chamada "SGVN API Tests"
3. Configure a vari√°vel de ambiente:
   - Variable: base_url
   - Value:   npm run test:all   npm run test:all
===============================================
üîê TESTES DE AUTENTICA√á√ÉO
===============================================

1Ô∏è‚É£ LOGIN (POST)
-----------------------------------------------
Method: POST
URL: {{base_url}}/auth/login
Headers: Content-Type: application/json

Body (raw JSON):
{
  "email": "admin@sgvn.com",
  "senha": "admin123"
}

‚úÖ Salve o token da resposta para usar nos pr√≥ximos testes!

2Ô∏è‚É£ DADOS DO USU√ÅRIO (GET)
-----------------------------------------------
Method: GET
URL: {{base_url}}/auth/me
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

3Ô∏è‚É£ REGISTRO DE USU√ÅRIO (POST)
-----------------------------------------------
Method: POST
URL: {{base_url}}/auth/register
Headers: Content-Type: application/json

Body (raw JSON):
{
  "nome": "Usu√°rio Teste",
  "email": "teste@email.com",
  "senha": "senha123"
}

4Ô∏è‚É£ STATUS DA SENHA (GET)
-----------------------------------------------
Method: GET
URL: {{base_url}}/auth/password-status
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

5Ô∏è‚É£ ALTERAR SENHA (PUT)
-----------------------------------------------
Method: PUT
URL: {{base_url}}/auth/change-password
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

Body (raw JSON):
{
  "senhaAtual": "admin123",
  "novaSenha": "novasenha123"
}

6Ô∏è‚É£ LISTAR USU√ÅRIOS (GET) - APENAS ADMIN
-----------------------------------------------
Method: GET
URL: {{base_url}}/auth/users
Headers: 
  - Authorization: Bearer {{admin_token}}
  - Content-Type: application/json

7Ô∏è‚É£ DEFINIR SENHA TEMPOR√ÅRIA (POST) - APENAS ADMIN
-----------------------------------------------
Method: POST
URL: {{base_url}}/auth/user/2/temp-password
Headers: 
  - Authorization: Bearer {{admin_token}}
  - Content-Type: application/json

Body (raw JSON):
{
  "senhaTemporaria": "1234"
}

===============================================
üè¢ TESTES DE LOCAIS
===============================================

8Ô∏è‚É£ LISTAR LOCAIS (GET)
-----------------------------------------------
Method: GET
URL: {{base_url}}/locais
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

9Ô∏è‚É£ BUSCAR LOCAL ESPEC√çFICO (GET)
-----------------------------------------------
Method: GET
URL: {{base_url}}/locais/1
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

üîü CRIAR LOCAL (POST)
-----------------------------------------------
Method: POST
URL: {{base_url}}/locais
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

Body (raw JSON):
{
  "nome": "Porto de Santos",
  "endereco": "Av. do Porto, 1000",
  "cidade": "Santos",
  "estado": "SP",
  "cep": "11000-000",
  "telefone": "(13) 99999-9999",
  "email": "porto@santos.com",
  "observacoes": "Porto principal de Santos"
}

1Ô∏è‚É£1Ô∏è‚É£ ATUALIZAR LOCAL (PUT)
-----------------------------------------------
Method: PUT
URL: {{base_url}}/locais/1
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

Body (raw JSON):
{
  "nome": "Porto de Santos Atualizado",
  "observacoes": "Informa√ß√µes atualizadas"
}

1Ô∏è‚É£2Ô∏è‚É£ DELETAR LOCAL (DELETE)
-----------------------------------------------
Method: DELETE
URL: {{base_url}}/locais/1
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

===============================================
üö¢ TESTES DE EMBARCA√á√ïES
===============================================

1Ô∏è‚É£3Ô∏è‚É£ LISTAR EMBARCA√á√ïES (GET)
-----------------------------------------------
Method: GET
URL: {{base_url}}/embarcacoes
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

1Ô∏è‚É£4Ô∏è‚É£ BUSCAR EMBARCA√á√ÉO ESPEC√çFICA (GET)
-----------------------------------------------
Method: GET
URL: {{base_url}}/embarcacoes/1
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

1Ô∏è‚É£5Ô∏è‚É£ CRIAR EMBARCA√á√ÉO (POST)
-----------------------------------------------
Method: POST
URL: {{base_url}}/embarcacoes
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

Body (raw JSON):
{
  "nome": "Barco de Pesca",
  "tipo": "Lancha",
  "comprimento": 15.5,
  "largura": 5.2,
  "altura": 4.0,
  "proprietario": "Jo√£o da Silva",
  "telefone": "(21) 88888-8888",
  "email": "joao@pesca.com"
}

1Ô∏è‚É£6Ô∏è‚É£ ATUALIZAR EMBARCA√á√ÉO (PUT)
-----------------------------------------------
Method: PUT
URL: {{base_url}}/embarcacoes/1
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

Body (raw JSON):
{
  "nome": "Barco de Pesca Atualizado",
  "proprietario": "Jo√£o da Silva Santos"
}

1Ô∏è‚É£7Ô∏è‚É£ DELETAR EMBARCA√á√ÉO (DELETE)
-----------------------------------------------
Method: DELETE
URL: {{base_url}}/embarcacoes/1
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

===============================================
üìã TESTES DE VISTORIAS
===============================================

1Ô∏è‚É£8Ô∏è‚É£ LISTAR VISTORIAS (GET)
-----------------------------------------------
Method: GET
URL: {{base_url}}/vistorias
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

1Ô∏è‚É£9Ô∏è‚É£ BUSCAR VISTORIA ESPEC√çFICA (GET)
-----------------------------------------------
Method: GET
URL: {{base_url}}/vistorias/1
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

2Ô∏è‚É£0Ô∏è‚É£ CRIAR VISTORIA (POST)
-----------------------------------------------
Method: POST
URL: {{base_url}}/vistorias
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

Body (raw JSON):
{
  "embarcacao_id": 1,
  "local_id": 1,
  "data_vistoria": "2024-01-15",
  "observacoes": "Vistoria de seguran√ßa"
}

2Ô∏è‚É£1Ô∏è‚É£ ATUALIZAR VISTORIA (PUT)
-----------------------------------------------
Method: PUT
URL: {{base_url}}/vistorias/1
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

Body (raw JSON):
{
  "data_vistoria": "2024-01-16",
  "observacoes": "Vistoria atualizada"
}

2Ô∏è‚É£2Ô∏è‚É£ DELETAR VISTORIA (DELETE)
-----------------------------------------------
Method: DELETE
URL: {{base_url}}/vistorias/1
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

===============================================
‚ö†Ô∏è TESTES DE VALIDA√á√ÉO
===============================================

2Ô∏è‚É£3Ô∏è‚É£ TESTE SEM TOKEN (GET)
-----------------------------------------------
Method: GET
URL: {{base_url}}/locais
Headers: Content-Type: application/json
(N√£o incluir Authorization)

2Ô∏è‚É£4Ô∏è‚É£ TESTE COM TOKEN INV√ÅLIDO (GET)
-----------------------------------------------
Method: GET
URL: {{base_url}}/locais
Headers: 
  - Authorization: Bearer token_invalido
  - Content-Type: application/json

2Ô∏è‚É£5Ô∏è‚É£ TESTE DE CAMPOS OBRIGAT√ìRIOS (POST)
-----------------------------------------------
Method: POST
URL: {{base_url}}/locais
Headers: 
  - Authorization: Bearer {{token}}
  - Content-Type: application/json

Body (raw JSON):
{
  "nome": ""
}

2Ô∏è‚É£6Ô∏è‚É£ TESTE DE ACESSO NEGADO (GET)
-----------------------------------------------
Method: GET
URL: {{base_url}}/auth/users
Headers: 
  - Authorization: Bearer {{vistoriador_token}}
  - Content-Type: application/json

===============================================
üéØ ORDEM RECOMENDADA DE TESTES
===============================================

1. Login (teste 1)
2. Dados do usu√°rio (teste 2)
3. Listar locais (teste 8)
4. Criar local (teste 10)
5. Atualizar local (teste 11)
6. Deletar local (teste 12)
7. Listar embarca√ß√µes (teste 13)
8. Criar embarca√ß√£o (teste 15)
9. Atualizar embarca√ß√£o (teste 16)
10. Deletar embarca√ß√£o (teste 17)
11. Testar valida√ß√µes (testes 23-26)

===============================================
üìù CONFIGURA√á√ÉO DE VARI√ÅVEIS NO POSTMAN
===============================================

1. V√° em Environment
2. Crie um novo Environment chamado "SGVN Local"
3. Adicione as vari√°veis:
   - base_url: http://localhost:3000/api
   - token: (cole aqui o token do login)
   - admin_token: (cole aqui o token do admin)
   - vistoriador_token: (cole aqui o token do vistoriador)

===============================================
‚úÖ RESULTADOS ESPERADOS
===============================================

‚úÖ SUCESSO (200/201):
- Login retorna token
- GET retorna dados
- POST/PUT/DELETE funcionam
- Headers corretos

‚ùå ERRO ESPERADO:
- 401: Token inv√°lido/ausente
- 403: Acesso negado
- 400: Dados inv√°lidos
- 404: Recurso n√£o encontrado

===============================================
üöÄ PRONTO PARA TESTAR!
===============================================

1. Configure o ambiente no Postman
2. Execute os testes na ordem recomendada
3. Verifique os status codes
4. Confirme que os dados est√£o corretos

Boa sorte com os testes! üéâ

